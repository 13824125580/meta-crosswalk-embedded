commit 163185265382e9ecdb6035a90132411b59dd44ba
Author: Tiago Vignatti <tiago.vignatti@intel.com>
Date:   Mon Sep 8 13:42:08 2014 +0300

    runtime: Add cmd line option for changing native host window bounds
    
    Ideally we would like to use ui::DisplayConfigurator for hotplug the monitors
    and set the host window bounds automatically based on their mode sizes. That's
    not possible though cause Crosswalk embedded solution doesn't fetch ChromeOS
    dependencies, which is where ui::DisplayConfigurator situates.
    
    Our solution here therefore is to pass through command-line options the native
    bounds, using --xwalk-host-window-bounds=800,600 (or whatever is the
    appropriated monitor resolution). One would also just link this newly option
    with sysfs output like --xwalk-host-window-bounds=`cat /sys/class/graphics/fb0/virtual_size`

diff --git a/xwalk/runtime/browser/ui/native_app_window_aura.cc b/xwalk/runtime/browser/ui/native_app_window_aura.cc
index 23f2fdc..7d85e18 100644
--- a/xwalk/runtime/browser/ui/native_app_window_aura.cc
+++ b/xwalk/runtime/browser/ui/native_app_window_aura.cc
@@ -4,6 +4,7 @@
 
 #include "xwalk/runtime/browser/ui/native_app_window_aura.h"
 
+#include "base/command_line.h"
 #include "content/public/browser/web_contents.h"
 #include "content/browser/web_contents/web_contents_view.h"
 #include "ui/aura/client/aura_constants.h"
@@ -32,6 +33,8 @@ namespace xwalk {
 const int kDefaultTestWindowWidthDip = 1366;
 const int kDefaultTestWindowHeightDip = 769;
 
+const char kXwalkHostWindowBounds[] = "xwalk-host-window-bounds";
+
 namespace {
 
 class FillLayout : public aura::LayoutManager {
@@ -198,9 +201,24 @@ NativeAppWindowAura::NativeAppWindowAura(
     const NativeAppWindow::CreateParams& create_params)
   : web_contents_(create_params.web_contents) {
   aura::Env::CreateInstance(true);
-  const gfx::Size bounds =
+
+  gfx::Size size;
+  const gfx::Size default_size =
       gfx::Size(kDefaultTestWindowWidthDip, kDefaultTestWindowHeightDip);
-  host_.reset(aura::WindowTreeHost::Create(gfx::Rect(bounds)));
+
+  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch(kXwalkHostWindowBounds)) {
+    const std::string size_str =
+        command_line->GetSwitchValueASCII(kXwalkHostWindowBounds);
+    int width, height;
+    if (sscanf(size_str.c_str(), "%d,%d", &width, &height) == 2)
+      size = gfx::Size(width, height);
+  }
+
+  if (size.IsEmpty())
+    size = default_size;
+
+  host_.reset(aura::WindowTreeHost::Create(gfx::Rect(size)));
   host_->InitHost();
   host_->window()->SetLayoutManager(new FillLayout(host_->window()));
 
